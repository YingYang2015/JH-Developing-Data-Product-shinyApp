y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 8
M <- 24
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 8
M <- 24
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
N <- 50
M <- 150
m <- 0
py <- rep(0,100000)
dice <- c(1:6)
for(i in 1:1000){
y <- sample(x = dice, size = N, replace = TRUE)
if(sum(y) == M){y}else{y <- 0}
py[i] <- prod(y)
}
mean(py[which(py!=0)])
numbers <- 1:10
sample(x = numbers, size = 20, replace = TRUE)
dice.roll <- function(N){
dice <- sample(1:6, size = N, replace = TRUE)
return(sum(dice))
}
dice.roll(50)
dice.roll(50)
dice.roll(50)
dice.roll(50)
dice.roll(50)
replicate(n = 10000, expr = dice.roll(N))
mean(replicate(n = 10000, expr = dice.roll(N)))
dice.roll <- function(N){
dice <- sample(1:6, size = N, replace = TRUE)
return(sum(dice))
}
sims <-replicate(10000, dice.roll(N))
table(sims)/length(sims)
sims <-replicate(10000, dice.roll(N)) == M
sim
sims
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(dice)
}
}
sims <- replicate(10000, dice.roll(N, M))
sims
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(dice)
}else{
return("NULL")
}
}
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
dice.roll(N, M)
1/6/6/6
N <- 3
M <- 18
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(dice)
}else{
return("NULL")
}
}
sims <- replicate(10000, dice.roll(N, M))
sims
sims <- replicate(1000, dice.roll(N, M))
dim(sims)
class(sims)
sims(1)
sims[1]
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(sum(dice))
}else{
return("NULL")
}
}
sims <- replicate(1000, dice.roll(N, M))
sims
N <- 3
M <- 18
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(sum(dice))
}else{
return("0")
}
}
sims <- replicate(1000, dice.roll(N, M))
sims
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(sum(dice))
}else{
return(0)
}
}
sims <- replicate(1000, dice.roll(N, M))
sims(which[sims!=0])
sims[which(sims!=0)]
5/1000
1/36/6
sims <- replicate(10000, dice.roll(N, M))
sims[which(sims!=0)]
length(sims[which(sims!=0)])
length(sims[which(sims!=0)])/100000
sims <- replicate(100000, dice.roll(N, M))
length(sims[which(sims!=0)])/100000
sims <- replicate(1000000, dice.roll(N, M))
length(sims[which(sims!=0)])/1000000
sims[which(sims!=0)]
N <- 8
M <- 24
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(sum(dice))
}else{
return(0)
}
}
sims <- replicate(1000000, dice.roll(N, M))
length(sims[which(sims!=0)])/1000000
sims[which(sims!=0
)]
N <- 8
M <- 24
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
prodDice <- prod(dice)
return(prodDice)
}else{
return(0)
}
}
sims <- replicate(1000000, dice.roll(N, M))
sum(sims)/length(sims[which(sims!=0)])
Prod <- sims[which(sims!=0)]
Prod
mean(Prod)
std(Prod)
sd(Prod)
N <- 8
M <- 24
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(prod(dice))
}else{
return(0)
}
}
sims <- replicate(1000000, dice.roll(N, M))
prodDice <- sims[which(sims!=0)]
mean(prodDice)
sd(prodDice)
source('~/.active-rstudio-document', echo=TRUE)
N <- 8
M <- 28
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(prod(dice))
}else{
return(0)
}
}
sims <- replicate(1000000, dice.roll(N, M))
prodDice <- sims[which(sims!=0)]
mean(prodDice)
sd(prodDice)
N <- 8
M <- 28
dice.roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(prod(dice))
}else{
return(0)
}
}
sims <- replicate(1000000, dice.roll(N, M))
prodDice <- sims[which(sims!=0)]
sum(prodDice)
mean(prodDice)
sd(prodDice)
source('C:/Users/User/Desktop/DataIncubator-Challenge.R', echo=TRUE)
options(digits=10)
mean(prodDice)
sd(prodDice)
sims <- replicate(1000000, dice.roll(50, 150))
prodDice <- sims[which(sims!=0)]
mean(prodDice)
sd(prodDice)
set.seed(824)
sims <- replicate(1000000, dice.roll(8, 24))
prodDice <- sims[which(sims!=0)]
mean(prodDice)
sd(prodDice)
set.seed(50150)
sims <- replicate(1000000, dice.roll(50, 150))
prodDice <- sims[which(sims!=0)]
mean(prodDice)
sd(prodDice)
23*60
source('C:/Users/User/Desktop/DataIncubator-Challenge.R', echo=TRUE)
know about the product of the faces.
#' Author
#' Date
#' This script is data incubator challenge
#' define a function of rolling a dice N times with the sum as M
dice_roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
if(sum(dice) == M){
return(prod(dice))
}else{
return(0)
}
}
#' set the digits requirement
options(digits=10)
#' Calculate the expectation and standard deviation when
#' N = 8 and M = 24
#' using 1000000 times simulations
set.seed(1234)
meanStd <- function(N,M){
dice_simulation <- replicate(1000000, dice_roll(N, M))
prodDice <- dice_simulation[which(dice_simulation!=0)]
return(data.frame("Expectation" = mean(prodDice), "Standard Deviation" = sd(prodDice)))
}
meanStd(8,24)
meanStd(2,5)
20/36
dice_roll(2,5)
dice_roll(2,5)
dice_roll(2,5)
dice_roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
print(dice)
if(sum(dice) == M){
return(prod(dice))
}else{
return(0)
}
}
dice_roll(2,5)
dice_roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
print(dice)
if(sum(dice) == M){
return(prod(dice))
}else{
return(0)
}
}
dice_roll(2,5)
dice_roll(2,5)
meanStd(2,5)
dice_roll <- function(N, M){
dice <- sample(1:6, size = N, replace = TRUE)
#print(dice)
if(sum(dice) == M){
return(prod(dice))
}else{
return(0)
}
}
meanStd(2,5)
set.seed(1234)
exp_std <- function(N,M){
dice_simulation <- replicate(1000000, dice_roll(N, M))
prodDice <- dice_simulation[which(dice_simulation!=0)]
# print 1000,
# if(M<0){
#         "This is not a right input"
# }else if( M > 6*N){
#
# }
#         # exception control
return(prdDice)
#return(data.frame("Expectation" = mean(prodDice), "Standard Deviation" = sd(prodDice)))
}
meanStd(2,5)
exp_std <- function(N,M){
dice_simulation <- replicate(100, dice_roll(N, M))
prodDice <- dice_simulation[which(dice_simulation!=0)]
# print 1000,
# if(M<0){
#         "This is not a right input"
# }else if( M > 6*N){
#
# }
#         # exception control
return(prdDice)
#return(data.frame("Expectation" = mean(prodDice), "Standard Deviation" = sd(prodDice)))
}
meanStd(2,5)
exp_std <- function(N,M){
dice_simulation <- replicate(100, dice_roll(N, M))
prodDice <- dice_simulation[which(dice_simulation!=0)]
# print 1000,
# if(M<0){
#         "This is not a right input"
# }else if( M > 6*N){
#
# }
#         # exception control
return(prdDice)
#return(data.frame("Expectation" = mean(prodDice), "Standard Deviation" = sd(prodDice)))
}
meanStd(2,5)
127+78+61+32+68+126+431+906+3545+2231+1618+1378+1384+1585+2034+2349+2306+1606+826+589+483+286
431/27639
load(url("http://varianceexplained.org/files/trump_tweets_df.rda"))
source('cast_dtm_h2o.R')
tweets <- trump_tweets_df %>%
select(id, statusSource, text, created) %>%
extract(statusSource, "source", "Twitter for (.*?)<") %>%
filter(source %in% c("iPhone", "Android"))
library(dplyr)
setwd("C:/Users/User/Dropbox/Data Science/Jonhs Hopkins Courses/R coding practice _Ying/9. Developing Data Products/Shinny App")
source('cast_dtm_h2o.R')
tweets <- trump_tweets_df %>%
select(id, statusSource, text, created) %>%
extract(statusSource, "source", "Twitter for (.*?)<") %>%
filter(source %in% c("iPhone", "Android"))
tweet_words <- find_tweet_words(tweets)
tweet_word_counts <- compute_ti_idf(tweet_words)
dtm <- cast_dtm_h2o(tweet_word_counts, "id", "word", 1)
library(h2o)
h2o.init(nthreads = -1)
tweet_word_counts <- compute_ti_idf(tweet_words)
dtm <- cast_dtm_h2o(tweet_word_counts, "id", "word", 1)
source('processWordsFun.R')
load("DocumentTermMatrix_tweet.RData")
shiny::runApp()
rm(list = ls())
DocumentTermMatrix_tweet.RData
load("DocumentTermMatrix_tweet.RData")
runApp()
#         count(word) %>%
source('C:/Users/User/Dropbox/Data Science/Jonhs Hopkins Courses/R coding practice _Ying/9. Developing Data Products/trump-vs-staff-tweets_Shinny App.R', echo=TRUE)
runApp()
runApp()
source('C:/Users/User/Dropbox/Data Science/Jonhs Hopkins Courses/R coding practice _Ying/9. Developing Data Products/trump-vs-staff-tweets_Shinny App.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
